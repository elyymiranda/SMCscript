#!/bin/bash

# This script generate the modified orbitals from a SMC pseudo-spectrum analysis (script_p).
# Script made by Ely Miranda, PhD student at Physics Institute in Universidade de SÃ£o Paulo
# Last update: 07/03/2023
# Any question or suggestion write me: ely.miranda@usp.br :)

### Input information

if [ $# -eq 0 ]; then  # If no argument (input) is given, end the script.
    echo "No input provided"
    exit 1
fi

FOLDER=$(dirname $(readlink -f $1))  # Track the job folder
LOG=$(grep "^LOG" $1 | cut -d "=" -f 2 | sed 's/ //g')
NBF=$(grep -n "NUMBER OF CARTESIAN GAUSSIAN BASIS FUNCTIONS =" $LOG | cut -c52-)  # Find the total number of basis

ILINE=$(grep -n " BEGIN" $1 | awk '{print $1}' | sed 's/[^0-9]*//g')  # Find the initial line of the states info
FLINE=$(grep -n " END" $1 | awk '{print $1}' | sed 's/[^0-9]*//g')  # Find the final line of the states info
sed -n "$((${ILINE}+1)),$((${FLINE}-1)) p" $1 > $FOLDER/tmp  # Save the states info

TOTAL_STATES=$(wc -l $FOLDER/tmp | awk '{print $1}') # Find the last line of the states info

### Obtain fTOTAL_STATESrom the .log file (parteA - GAMESSMC) the import range of lines to modify

ILINE=$(grep -n "EIGENVECTORS" $LOG | awk '{print $1}' | sed 's/[^0-9]*//g')  # Initial line
FLINE=$(grep -n "...... END OF RHF CALCULATION ......" $LOG | awk '{print $1}' | sed 's/[^0-9]*//g')  # Final line
sed -n "$((${ILINE}+3)),$((${FLINE}-1)) p" $LOG > $FOLDER/tmp2  # Saving it


### Find the psudo-states main orbitals (analyzed from the pseudo-spactrum) and copy important columns for oher file in order to opetate it

for STATE in $(seq 1 $TOTAL_STATES); do

	SUM1=0

	TOTAL=$(awk -v line=$STATE '{if (NR==line) print NF;}' $FOLDER/tmp)  # Count the number of columns in a specific line of a file
	ORB=()
	COEF=()

	if [ $TOTAL == 1 ]; then

		ORB+=( $(awk -v row=$STATE -v col=1 '{if (NR==row) {print $col}}' $FOLDER/tmp) )  # Build orbital vector
		COEF+=( $(awk -v row=$STATE -v col=2 '{if (NR==row) {print $col}}' $FOLDER/tmp) )  # Build coefficient vector

	else

		for EACH in $(seq 1 $(($TOTAL/2))); do
		
			ORB+=( $(awk -v row=$STATE -v col=$((2*$EACH-1)) '{if (NR==row) {print $col}}' $FOLDER/tmp) )  # Build orbital vector
			COEF+=( $(awk -v row=$STATE -v col=$((2*$EACH)) '{if (NR==row) {print $col}}' $FOLDER/tmp) )  # Build coefficient vector
		
		done

	fi

	ELEMENT=0


	for ORBITAL in ${ORB[@]}; do

		ORBCOLUMN=$(($ORBITAL%5))  # Find the column in the .log file responsable to the required orbital using the rest of quocient

		if [[ $ORBCOLUMN == 0 ]]; then  # If the quocient of the orbital number by 5 is exact, then  
			IORBLINE=$((($ORBITAL/5 -1)*($NBF+4)+4))  # We should find this line in .log  
		    FORBLINE=$(($IORBLINE+$NBF-1))
			sed -n "$IORBLINE,$FORBLINE p" $FOLDER/tmp2 > $FOLDER/${STATE}_$ORBITAL  # Cut and save it

			paste <(awk '{print $9}' $FOLDER/${STATE}_$ORBITAL) > $FOLDER/tmp3  # Take only the important column
			mv $FOLDER/tmp3 $FOLDER/${STATE}_$ORBITAL  # Rename it 

#			SUM=0

#			for BASIS in $(seq 1 $NBF); do

#				LINE=$(sed -n "$BASIS p" $FOLDER/${STATE}_$ORBITAL)
#				LINE=$(echo "$LINE" | sed 's/e/*10^/')
#				SUM=$(echo "scale=8; $SUM + $LINE * $LINE" | bc)

#			done

#			RENOR=$(echo "scale=8; sqrt($SUM)" | bc)
#			RENOR=$(echo "scale=8; 1/$RENOR" | bc)

#			perl -i -lpe '$_=$_'*$RENOR $FOLDER/${STATE}_$ORBITAL  # Multiply the coef. by the weight choosen
			perl -i -lpe '$_=$_'*${COEF[$ELEMENT]} $FOLDER/${STATE}_$ORBITAL  # Multiply the coef. by the weight choosen
			ELEMENT=$(($ELEMENT+1))

		else  # If the quocient of the orbital number by 5 is not exact, then
			IORBLINE=$(($ORBITAL/5*($NBF+4)+4))  # We should find this line in .log 
			FORBLINE=$(($IORBLINE+$NBF-1))
			sed -n "$IORBLINE,$FORBLINE p" $FOLDER/tmp2 > $FOLDER/${STATE}_$ORBITAL  # Cut and save it

			COLUMN=$(($ORBCOLUMN+4))  # We should translate it in order to obtain the right column
			paste <(awk -v COLUMN=$COLUMN '{print $COLUMN}' $FOLDER/${STATE}_$ORBITAL) > $FOLDER/tmp3  # Take only the important column
			mv $FOLDER/tmp3 $FOLDER/${STATE}_$ORBITAL  # Rename it

#			SUM=0

#			for BASIS in $(seq 1 $NBF); do

#				LINE=$(sed -n "$BASIS p" $FOLDER/${STATE}_$ORBITAL)
#				LINE=$(echo "$LINE" | sed 's/e/*10^/')
#				SUM=$(echo "scale=8; $SUM + $LINE * $LINE" | bc)

#			done

#			RENOR=$(echo "scale=8; sqrt($SUM)" | bc)
#			RENOR=$(echo "scale=8; 1/$RENOR" | bc)

#			perl -i -lpe '$_=$_'*$RENOR $FOLDER/${STATE}_$ORBITAL  # Multiply the coef. by the weight choosen
			perl -i -lpe '$_=$_'*${COEF[$ELEMENT]} $FOLDER/${STATE}_$ORBITAL  # Multiply the coef. by the weight choosen
			ELEMENT=$(($ELEMENT+1))
		fi


	done

### Find the coefficients in input and solve the Eq. to obtain the value to fix the probabilities

#	for BASIS in $(seq 1 $NBF); do

#		SUM2=0
		
#		for ORBITAL in ${ORB[@]}; do

#			LINE=$(sed -n "$BASIS p" $FOLDER/${STATE}_$ORBITAL)
#			LINE=$(echo "$LINE" | sed 's/e/*10^/')
#			SUM2=$(echo "scale=6; $SUM2 + $LINE" | bc)
		
#		done

#		SUM2=$(echo "scale=6; $SUM2 * $SUM2" | bc)
#		SUM1=$(echo "scale=6; $SUM1 + $SUM2" | bc)

#	done

	for COEFI in ${COEF[@]}; do

		SUM1=$(echo "scale=6; $SUM1 + $COEFI * $COEFI" | bc)		

	done


	NEWCOEFF=$(echo "sqrt($SUM1)" | bc -l)  # Second part to obtain x=Sqrt(1/SUM(COEF^2)), i.e the new coefficients (rebuild normalizaion)
	NEWCOEFF=$(echo "1/$NEWCOEFF" | bc -l)  # Third part to obtain x=Sqrt(1/SUM(COEF^2)), i.e the new coefficients (rebuild normalizaion)

### Operate the date and save the results

	perl -i -lpe '$_=$_'*$NEWCOEFF $FOLDER/${STATE}_*  # Multiply the coef. by x to rebuild normalization

	paste $FOLDER/${STATE}_* | perl -MList::Util=sum -lane 'print sum(@F)' > $FOLDER/${STATE}  # Sum all the renormalized orbitals to obtain the final state
	LC_ALL="C" awk '{printf("%.6f\n", $1)}' $FOLDER/${STATE} > $FOLDER/tmp4   # Just adjusting the number of decimal numbers
	LC_ALL="C" awk '{printf "%9s\n", $1}' $FOLDER/tmp4 > $FOLDER/${STATE}  #
#	rm $FOLDER/${STATE}_* $FOLDER/tmp4
		

### Rebuild the input e save it.

	sed '/EIGENVECTORS/q' $LOG > $FOLDER/${STATE}.final
	echo '          ------------
	' >> $FOLDER/${STATE}.final

	sed '1,3d' $FOLDER/tmp2 > $FOLDER/tmp5
	sed -i "1,$NBF ! d" $FOLDER/tmp5
	
	> $FOLDER/tmp6
	for line in $(seq 1 $NBF); do
        	sed "${line}q;d" $FOLDER/tmp5 | cut -c1-14 >> $FOLDER/tmp6
	done

	paste $FOLDER/tmp6 $FOLDER/${STATE} > $FOLDER/tmp7
      
      	sed -i '1i\                    1' $FOLDER/tmp7
        sed -i '2i\                  0.0000' $FOLDER/tmp7
        sed -i '3i\                   A' $FOLDER/tmp7
	cat $FOLDER/tmp7 >> $FOLDER/${STATE}.final

	sed '/...... END OF RHF CALCULATION ....../,$!d' $LOG >> $FOLDER/${STATE}.final

	rm $FOLDER/${STATE}_* $FOLDER/${STATE}

done

rm $FOLDER/tmp*  # Remove temporary file 




